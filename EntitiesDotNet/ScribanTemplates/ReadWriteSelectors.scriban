{{- include '_Global.scriban' -}}

{{- namespace = "Selectors" -}}
{{- type_name = "Selector" -}}

using System.Collections;
using System.Diagnostics.Contracts;
using {{ root_namespace }}.ComponentArrayGenerics;


namespace {{ root_namespace }} {
    {{- method_name = "From" }}

    {{- for count in 1..type_parameters_count
        type_parameters_str_value = type_parameters_str count }}

    public static class Read<{{ type_parameters_str_value }}>
    {
        {{- last_index = count - 1 }}
        {{- read_count = count }}
                
        [Pure] public static ComponentArray_{{ rw_suffix count count }}<{{ type_parameters_str_value }}>
            {{ method_name }}(IComponentArray array) => new (array);
            
        [Pure] public static EntityArrays_{{ rw_suffix count count }}<{{ type_parameters_str_value }}>
            {{ method_name }}(EntityArrays array) => new (array);

        {{- if count < type_parameters_count
            for extra_count in (count + 1)..type_parameters_count
                extra_write_count = read_count + extra_count }}
                
        public static class Write<{{ type_parameters_str_offset (extra_count - count) count }}>
        {
            [Pure] public static ComponentArray_{{ rw_suffix extra_count read_count }}<{{ type_parameters_str extra_count }}>
                {{ method_name }}(IComponentArray array) => new (array);
                
            [Pure] public static EntityArrays_{{ rw_suffix extra_count read_count }}<{{ type_parameters_str extra_count }}>
                {{ method_name }}(EntityArrays array) => new (array);
        }
            
            {{- end }}
        {{- end }}
    }
        
    public static class Write<{{ type_parameters_str_value }}>
    {
        [Pure] public static ComponentArray_{{ rw_suffix count 0 }}<{{ type_parameters_str_value }}>
            {{ method_name }}(IComponentArray array) => new (array);
            
        [Pure] public static EntityArrays_{{ rw_suffix count 0 }}<{{ type_parameters_str_value }}>
            {{ method_name }}(EntityArrays array) => new (array);
    }
    {{- end }}
    
}


namespace {{ root_namespace }} {
    public static class {{ type_name }} {
    {{- for count in 1..type_parameters_count
        type_parameters_str_value = type_parameters_str count 
    }}
        [Pure] public static {{ type_name }}_{{ rw_suffix count count }}<
            {{- type_parameters_str_value }}> Read<{{ type_parameters_str_value }}>() => default;
        [Pure] public static {{ type_name }}_{{ rw_suffix count 0 }}<
            {{- type_parameters_str_value }}> Write<{{ type_parameters_str_value }}>() => default;
    {{- end }}
    }

    public static partial class ComponentArrayExtensions {
        
    {{- for count in 1..type_parameters_count
        type_parameters_str_value = type_parameters_str count 
        for read_count in count..0
            rw_suffix_value = rw_suffix count read_count
    }}
        [Pure] public static ComponentArray_{{ rw_suffix_value }}<
            {{- type_parameters_str_value -}}
            > Select<{{- type_parameters_str_value }}>(this IComponentArray @this, {{ type_name }}_{{ rw_suffix_value }}<
                {{- type_parameters_str_value -}}> selector) => new (@this);
        {{- end }}
    {{- end -}}
        
    }
}


namespace {{ root_namespace }}.ComponentArrayGenerics {

    {{-
    func AssignSpanVariables (count, readCount)
        if readCount > 0
            for $i in 0..(readCount - 1)
        ~}}
                span{{ $i }} = this.Array.GetReadOnlySpan<T{{ $i }}>();
        {{~
            end
        end
        
        if readCount < count
            for $i in readCount..(count - 1)
        ~}}
                span{{ $i }} = this.Array.GetSpan<T{{ $i }}>();
        {{~
            end
        end
    end
    -}}

    {{-
    for count in 1..type_parameters_count
        last_index = count - 1
        for read_count in count..0
    }}

    public readonly struct {{ type_name }}_{{ rw_suffix count read_count }}<{{- type_parameters_str count -}}>
    {

        {{-
        if read_count == count && count < type_parameters_count
            for extra_count in (count + 1)..type_parameters_count
        }}
        [Pure] public {{ type_name }}_{{ rw_suffix extra_count extra_count }}<
            {{- type_parameters_str extra_count -}}
        > Read<{{ type_parameters_str_offset (extra_count - count) count }}>() => default;
        {{-
            end
        end
        }}

        {{-
        if count < type_parameters_count
            for extra_count in (count + 1)..type_parameters_count
                extra_write_count = read_count + extra_count
        }}
        [Pure] public {{ type_name }}_{{ rw_suffix extra_count read_count }}<
            {{- type_parameters_str extra_count -}}
        > Write<{{ type_parameters_str_offset (extra_count - count) count }}>() => default;
        {{-
            end
        end
        }}
    }
    
    {{
    struct_name = "ComponentArray_" + (rw_suffix count read_count)
    type_parameters_str_value = type_parameters_str count
    spans = span_array count read_count
    }}
        
    public readonly struct {{ struct_name }}<{{ type_parameters_str_value }}> {

        public {{ struct_name }}(IComponentArray array) {
            this.Array = array;
        }
        
        public readonly IComponentArray Array;

        public void Deconstruct(out int count, {{ spans | array_map @(do; ret "out " + $0 + " span" + $1; end) | array.join ", " }}) {
            if (this.Array.Archetype.Contains<{{ type_parameters_str count }}>()) {
                count = this.Array.Count;
                {{- for $i in 0..last_index }}
                span{{ $i }} = this.Array.Get{{ spans[$i] }}();
                {{- end }}
            }
            else {
                count = 0;
                {{- for $i in 0..last_index }}
                span{{ $i }} = default;
                {{- end }}
            }
        }

        public void Deconstruct({{ spans | array_map @(do; ret "out " + $0 + " span" + $1; end) | array.join ", " }}) {
            if (this.Array.Archetype.Contains<{{ type_parameters_str count }}>()) {
                {{- for $i in 0..last_index }}
                span{{ $i }} = this.Array.Get{{ spans[$i] }}();
                {{- end }}
            }
            else {
                {{- for $i in 0..last_index }}
                span{{ $i }} = default;
                {{- end }}
            }
        }
    }
    
    {{- entity_arrays_name = "EntityArrays_" + (rw_suffix count read_count) }}
    {{- component_array_name = struct_name + "<" + type_parameters_str_value + ">" }}
    
    public readonly struct {{ entity_arrays_name }}<{{ type_parameters_str_value }}>
        : IReadOnlyList<{{ component_array_name }}>
    {
        public {{ entity_arrays_name }}(EntityArrays entities)
        {
            this.Entities = entities;
        }


        public EntityArrays Entities { get; }


        public int Count => this.Entities.Count;


        public {{ component_array_name }} this[int index] =>
            new(this.Entities[index]);


        public Enumerator GetEnumerator() => new(this.Entities);


        IEnumerator<{{ component_array_name }}> IEnumerable<{{ component_array_name }}>.GetEnumerator() => this.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();


        public struct Enumerator : IEnumerator<{{ component_array_name }}>
        {
            public Enumerator(EntityArrays entities)
            {
                this.Entities = entities;
                this._currentIndex = -1;
            }


            public EntityArrays Entities { get; }
            private int _currentIndex = -1;


            public bool MoveNext()
            {
                return ++this._currentIndex < this.Entities.Count;
            }


            public void Reset()
            {
                this._currentIndex = -1;
            }


            public {{ component_array_name }} Current => new(this.Entities[this._currentIndex]);


            object IEnumerator.Current => this.Current;


            void IDisposable.Dispose() { }
        }
    }
        
        {{- end }}
    {{- end }}

}