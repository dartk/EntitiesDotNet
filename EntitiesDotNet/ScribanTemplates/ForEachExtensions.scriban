{{- include '_Global.scriban' -}}
using CSharp.SourceGen.Inlining.Attributes;
using {{ root_namespace }}.Delegates;


namespace {{ root_namespace }};


public static partial class ComponentArrayExtensions {

{{-

func RefFuncArgumentList (count, readCount)
    if readCount > 0
        for $i in 0..(readCount - 1)
    if $i > 0; ", "; end
    -}}
        span{{ $i }}[i]
    {{-
        end
    end
    if readCount < count
        for $i in readCount..(count - 1)
    if $i > 0; ", "; end
    -}}
        ref span{{ $i }}[i]
    {{-
        end
    end
end


for $count in 1..type_parameters_count
    $type_parameters_str = type_parameters_str $count
    for $read_count in $count..0
        $suffix = rw_suffix $count $read_count
        
        $read_components = []
        if $read_count > 0
            for $i in 0..($read_count - 1)
                $read_components[$i] = "T" + $i
            end
        end
        
        $write_components = []
        $write_count = $count - $read_count
        if $write_count > 0
            for $i in 0..($write_count - 1)
                $write_components[$i] = "T" + ($read_count + $i)
            end
        end
        
        $read_write_call = read_write_call $read_components $write_components
        
        # ------------
        # For inlining
        # ------------
        
        func func_arg (index)
            ret "{func.arg" + index + "}"
        end
        
        func func_arg_type (index)
            ret "{func.arg" + index + ".type}"
        end
    
        $inlined_type_parameters_str = 0..($count - 1) |
            array.each @(do
                ret func_arg_type $0
            end) |
            array.join ", "
            
        $inlined_type_parameters_str_offset = 1..$count |
            array.each @(do
                ret func_arg_type $0
            end) |
            array.join ", "
    }}
    
    [SupportsInlining("""
        if (!@this.Archetype.Contains<{{ $inlined_type_parameters_str }}>()) {
            return;
        }
        
        var __count = @this.Count;
        {{- for $i in 0..($count - 1) }}
        var __span{{ $i }} = @this.Get{{ if $i < $read_count; "ReadOnly"; end }}Span<{{ func_arg_type $i }}>();
        {{- end }}
        
        for (var __i = 0; __i < __count; ++__i) {
            {{- for $i in 0..($count - 1) }}
            ref {{ if $i < $read_count; "readonly "; end ~}} var {{ func_arg $i }} = ref __span{{ $i }}[__i];
            {{- end }}
            {func.body}
        }
    """)]
    public static void ForEach<{{ $type_parameters_str }}>(this IComponentArray @this, RefFunc_{{ $suffix }}<{{ $type_parameters_str }}> func) {
        if (!@this.Archetype.Contains<{{ $type_parameters_str }}>()) {
            return;
        }
        
        var count = @this.Count;
        {{- for $i in 0..($count - 1) }}
        var span{{ $i }} = @this.Get{{ if $i < $read_count; "ReadOnly"; end }}Span<T{{ $i }}>();
        {{- end }}
        
        for (var i = 0; i < count; ++i) {
            func({{~ RefFuncArgumentList $count $read_count ~}});
        }
    }
    
    
    [SupportsInlining("""
        if (!@this.Archetype.Contains<{{ $inlined_type_parameters_str_offset }}>()) {
            return;
        }
        
        var __count = @this.Count;
        {{- for $i in 0..($count - 1) }}
        var __span{{ $i }} = @this.Get{{ if $i < $read_count; "ReadOnly"; end }}Span<{{ func_arg_type ($i + 1) }}>();
        {{- end }}
        
        for (var __i = 0; __i < __count; ++__i) {
            var {{ func_arg 0 }} = __i;
            {{- for $i in 0..($count - 1) }}
            ref {{ if $i < $read_count; "readonly "; end ~}} var {{ func_arg ($i + 1) }} = ref __span{{ $i }}[__i];
            {{- end }}
            {func.body}
        }
    """)]
    public static void ForEach<{{ $type_parameters_str }}>(this IComponentArray @this, RefFunc_I_{{ $suffix }}<{{ $type_parameters_str }}> func) {
        if (!@this.Archetype.Contains<{{ $type_parameters_str }}>()) {
            return;
        }
        
        var count = @this.Count;
        {{- for $i in 0..($count - 1) }}
        var span{{ $i }} = @this.Get{{ if $i < $read_count; "ReadOnly"; end }}Span<T{{ $i }}>();
        {{- end }}
        
        for (var i = 0; i < count; ++i) {
            func(i, {{~ RefFuncArgumentList $count $read_count ~}});
        }
    }
    
    
    [SupportsInlining("""
        foreach (var __array in @this) {
            if (!__array.Archetype.Contains<{{ $inlined_type_parameters_str }}>()) {
                continue;
            }
            
            var __count = __array.Count;
            {{- for $i in 0..($count - 1) }}
            var __span{{ $i }} = __array.Get{{ if $i < $read_count; "ReadOnly"; end }}Span<{{ func_arg_type $i }}>();
            {{- end }}
            
            for (var __i = 0; __i < __count; ++__i) {
                {{- for $i in 0..($count - 1) }}
                ref {{ if $i < $read_count; "readonly "; end ~}} var {{ func_arg $i }} = ref __span{{ $i }}[__i];
                {{- end }}
                {func.body}
            }
        }
    """)]
    public static void ForEach<{{ $type_parameters_str }}>(this IEnumerable<IComponentArray> @this, RefFunc_{{ $suffix }}<{{ $type_parameters_str }}> func) {
        foreach (var array in @this) {
            if (!array.Archetype.Contains<{{ $type_parameters_str }}>()) {
                continue;
            }
            
            var count = array.Count;
            {{- for $i in 0..($count - 1) }}
            var span{{ $i }} = array.Get{{ if $i < $read_count; "ReadOnly"; end }}Span<T{{ $i }}>();
            {{- end }}
            
            for (var i = 0; i < count; ++i) {
                func({{~ RefFuncArgumentList $count $read_count ~}});
            }
        }
    }
    
    
    [SupportsInlining("""
        var __index = 0;
        foreach (var __array in @this) {
            if (!__array.Archetype.Contains<{{ $inlined_type_parameters_str_offset }}>()) {
                continue;
            }
            
            var __count = __array.Count;
            {{- for $i in 0..($count - 1) }}
            var __span{{ $i }} = __array.Get{{ if $i < $read_count; "ReadOnly"; end }}Span<{{ func_arg_type ($i + 1) }}>();
            {{- end }}
            
            for (var __i = 0; __i < __count; ++__i) {
                var {{ func_arg 0 }} = __index++;
                {{- for $i in 0..($count - 1) }}
                ref {{ if $i < $read_count; "readonly "; end ~}} var {{ func_arg ($i + 1) }} = ref __span{{ $i }}[__i];
                {{- end }}
                {func.body}
            }
        }
    """)]
    public static void ForEach<{{ $type_parameters_str }}>(this IEnumerable<IComponentArray> @this, RefFunc_I_{{ $suffix }}<{{ $type_parameters_str }}> func) {
        var index = 0;
        foreach (var array in @this) {
            if (!array.Archetype.Contains<{{ $type_parameters_str }}>()) {
                continue;
            }
            
            var count = array.Count;
            {{- for $i in 0..($count - 1) }}
            var span{{ $i }} = array.Get{{ if $i < $read_count; "ReadOnly"; end }}Span<T{{ $i }}>();
            {{- end }}
            
            for (var i = 0; i < count; ++i) {
                func(index++, {{~ RefFuncArgumentList $count $read_count ~}});
            }
        }
    }
    
{{-
    end
end
}}
}