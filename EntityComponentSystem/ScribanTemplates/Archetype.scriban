{{- include '_Global.scriban' -}}
namespace {{ root_namespace }}; 


{{- for count in 1..type_parameters_count }}
{{- last_index = count - 1 }}


public static class Archetype<{{ type_parameters_str count }}> {
    
    public static readonly Archetype Instance = Archetype.Instance(
        {{- for i in 0..last_index }}
        typeof(T{{ i }}) {{~ if i < last_index; ","; end }}
        {{- end }}
    );
    
}
{{- end }}


public partial class Archetype {

{{- for count in 1..type_parameters_count }}
{{- last_index = count - 1 }}

    public static Archetype Instance<{{ type_parameters_str count }}>() =>
        Archetype<{{ type_parameters_str count }}>.Instance;
        
        
    public Archetype With<{{ type_parameters_str count }}>() => this.With(
            {{- for i in 0..last_index }}
            typeof(T{{ i }}) {{~ if i < last_index; ","; end }}
            {{- end }}
        );
        
        
    public Archetype Without<{{ type_parameters_str count }}>() => this.Without(
            {{- for i in 0..last_index }}
            typeof(T{{ i }}) {{~ if i < last_index; ","; end }}
            {{- end }}
        );
        
    
    public Archetype WithShared<
        {{-
            array_create 0 count |
            array_map @(do; ret "T" + $0; end) |
            array.join ", "
        -}}
    >(
        {{-
            array_create 0 count |
                array_map @(do; ret string_format "T{0} sharedComponent{0}" $0; end) |
                array.join ", "
        -}}
    ) => this.With(
        {{-
            array_create 0 count |
                array_map @(do; ret string_format "SharedComponent.Instance(sharedComponent{0})" $0; end) |
                array.join ", "
        -}}
    );
        
        
    public bool Contains<{{ type_parameters_str count }}>() =>
        {{- for i in 0..last_index }}
        {{ if i > 0; "&& "; end }}this.Contains(typeof(T{{ i }}))
        {{- end }};
    
{{- end }}

}
