{{- # Functions

# Creates string "RR...RWW...W", readCount 'R' and (parameterCount - readCount) 'W'
func Suffix (parameterCount, readCount)
    $suffix = ""
    if readCount > 0
        for $i in 1..readCount
            $suffix += "R"
        end
    end
    
    $writeCount = parameterCount - readCount
    if $writeCount > 0
        for $i in 1..$writeCount
            $suffix += "W"
        end
    end
    
    ret $suffix
end

-}}

using System.Diagnostics.Contracts;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using EntitiesDotNet;

{{ namespace_open }}


{{-
    all_components = array.add_range read_components write_components
    all_components_with_spans = read_components |
        array.each @(do
            ret {
                span: ("ReadOnlySpan<" + $0.type + ">"),
                name: $0.name
            }
        end) |
        array.concat (write_components |
            array.each @(do
                ret {
                    span: ("Span<" + $0.type + ">"),
                    name: $0.name
                }
            end))

    # Creates string for IComponentArray.From method "Component0.Read, Component1.Write, ..."
    if (array.size read_components) > 0
        read_components_str = ".Read<" + (read_components | array.map "type" | array.join ", ") + ">"
    else
        read_components_str = ""
    end

    if (array.size write_components) > 0
        write_components_str = ".Write<" + (write_components | array.map "type" | array.join ", ") + ">"
    else
        write_components_str = ""
    end

    $type_parameters_str = all_components | array.map "type" | array.join ", "

    func component_span_name (name)
        ret "__" + name + "Span"
    end

    func component_name_at (index)
        ret all_components[index].name
    end

    func component_span_name_at (index)
        ret all_components[index].name + "Span";
    end

    $entity = "{action.arg0}"
    
    select_str = "EntitiesDotNet" + read_components_str + write_components_str
-}}

{{- if extensions_accessibility }}
public static partial class EntityRefForEachExtensions
{
    [SupportsInlining("""
        {{ full_name }} {{ $entity }} = default;
        foreach (var __array in @this) {
            var (__count, {{ all_components | array.each @(do; ret "__" + $0.name + "Span"; end) | array.join ", " }}) = {{ select_str }}.From(__array);
            if (__count == 0) continue;
            
            {{- $count = array.size all_components }}
            {{- for $i in 0..($count - 1) }}
            ref var __{{ component_name_at $i }} = ref System.Runtime.InteropServices.MemoryMarshal.GetReference(__{{ component_span_name_at $i }});
            {{- end }}
            
            for (var __i = 0; __i < __count;
                {{- for $i in 0..($count - 1) }}
                __{{ component_name_at $i }} = ref System.Runtime.CompilerServices.Unsafe.Add(ref __{{ component_name_at $i }}, 1),
                {{- end }}
                ++__i)
            {
                {{- for $i in 0..($count - 1) }}
                {{ $entity }}.{{ component_name_at $i }} = ref __{{ component_name_at $i }};
                {{- end }}
                
                {action.body}
            }
        }
        """)]
    {{ extensions_accessibility }} static void ForEach(this IEnumerable<IComponentArray> @this, {{ full_name }}.Delegates.ForEach action)
    {
        foreach (var array in @this)
        {
            array.ForEach(action);
        }
    }
    
    
    [SupportsInlining("""
        var __index = 0;
        {{ full_name }} {{ $entity }} = default;
        foreach (var __array in @this) {
            var (__count, {{ all_components | array.each @(do; ret "__" + $0.name + "Span"; end) | array.join ", " }}) = {{ select_str }}.From(__array);
            if (__count == 0) continue;
            
            {{- $count = array.size all_components }}
            {{- for $i in 0..($count - 1) }}
            ref var __{{ component_name_at $i }} = ref System.Runtime.InteropServices.MemoryMarshal.GetReference(__{{ component_span_name_at $i }});
            {{- end }}
            
            for (var __i = 0; __i < __count;
                {{- for $i in 0..($count - 1) }}
                __{{ component_name_at $i }} = ref System.Runtime.CompilerServices.Unsafe.Add(ref __{{ component_name_at $i }}, 1),
                {{- end }}
                ++__i)
            {
                var {action.arg1} = __index++;
                
                {{- for $i in 0..($count - 1) }}
                {{ $entity }}.{{ component_name_at $i }} = ref __{{ component_name_at $i }};
                {{- end }}
                
                {action.body}
            }
        }
        """)]
    {{ extensions_accessibility }} static void ForEach(this IEnumerable<IComponentArray> @this, {{ full_name }}.Delegates.ForEach_I action)
    {
        var index = 0;
        foreach (var array in @this)
        {
            array.ForEach(action, ref index);
        }
    }
    
    
    {{ extensions_accessibility }} static void ForEach(this IComponentArray array, {{ full_name }}.Delegates.ForEach action)
    {
        var (count, {{ all_components | array.map "name" | array.join ", " }}) = {{ select_str }}.From(array);
        
        if (count == 0) return;
        
        var entity = new {{ full_name }}
        {
            {{- for component in all_components }}
            {{ component.name }} = ref MemoryMarshal.GetReference({{ component.name }}),
            {{- end }}
        };
        
        action(entity);
        
        for (var i = 1; i < count; ++i)
        {
            {{- for component in read_components }}
            entity.{{ component.name }} = ref Unsafe.Add(ref Unsafe.AsRef(entity.{{ component.name }}), 1);
            {{- end }}
            
            {{- for component in write_components }}
            entity.{{ component.name }} = ref Unsafe.Add(ref entity.{{ component.name }}, 1);
            {{- end }}
            
            action(entity);
        }
    }
    
    
    {{ extensions_accessibility }} static void ForEach(this IComponentArray array, {{ full_name }}.Delegates.ForEach_I action)
    {
        var index = 0;
        array.ForEach(action, ref index);
    }
    
    
    private static void ForEach(this IComponentArray array, {{ full_name }}.Delegates.ForEach_I action, ref int index)
    {
        var (count, {{ all_components | array.map "name" | array.join ", " }}) = {{ select_str }}.From(array);
        
        if (count == 0) return;
        
        var entity = new {{ full_name }}
        {
            {{- for component in all_components }}
            {{ component.name }} = ref MemoryMarshal.GetReference({{ component.name }}),
            {{- end }}
        };
        
        action(entity, index++);
        
        for (var i = 1; i < count; ++i)
        {
            {{- for component in read_components }}
            entity.{{ component.name }} = ref Unsafe.Add(ref Unsafe.AsRef(entity.{{ component.name }}), 1);
            {{- end }}
            
            {{- for component in write_components }}
            entity.{{ component.name }} = ref Unsafe.Add(ref entity.{{ component.name }}, 1);
            {{- end }}
            
            action(entity, index++);
        }
    }
}
{{- end }}

{{ type_open }}
{
    
    [Pure]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {{ name }}.Array From(IComponentArray array) => new (array);

    
    public static Archetype Archetype => Archetype.Instance<{{ all_components | array.map "type" | array.join ", " }}>();


    public static class Delegates
    {
        public delegate void ForEach(in {{ name }} entity);
        public delegate void ForEach_I(in {{ name }} entity, int index);
    }
    
    public readonly ref struct Array {

        public Array(IComponentArray array) {
            {{- select_str = "EntitiesDotNet" + read_components_str + write_components_str }}
            (this.Length, {{ all_components | array.each @(do; ret ("var " + $0.name + "Span"); end) | array.join ", " }}) = {{ select_str }}.From(array);
            {{- for component in all_components }}
            this.{{ component.name }} = ref MemoryMarshal.GetReference({{ component.name }}Span);
            {{- end }}
        }
        
        
        public readonly int Length;
        
        {{- for component in all_components }}
        private readonly ref {{ component.type }} {{ component.name }};
        {{- end }}
        
        
        public {{ name }} this[int index] {
            get {
                {{ name }} result = default;
                {{- for component in all_components }}
                result.{{ component.name }} = ref Unsafe.Add(ref this.{{ component.name }}, index);
                {{- end }}
                return result;
            }
        }
        

        public Enumerator GetEnumerator() {
            return new Enumerator(this);
        }


        public ref struct Enumerator {
            public Enumerator(Array array) {
                this._index = -1;
                this._length = array.Length;
                if (this._length == 0) return;

                {{- for component in all_components }}
                this.{{ component.name }} = ref Unsafe.Subtract(ref array.{{ component.name }}, 1);
                {{- end }}
            }


            private int _index;
            private readonly int _length;

            {{- for component in all_components }}
            private ref {{ component.type }} {{ component.name }};
            {{- end }}


            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext()
            {
                {{- for component in all_components }}
                this.{{ component.name }} = ref Unsafe.Add(ref this.{{ component.name }}, 1);
                {{- end }}
                return ++this._index < this._length;
            }


            public {{ name }} Current
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {
                    {{ name }} result = default;
                    {{- for component in all_components }}
                    result.{{ component.name }} = ref this.{{ component.name }};
                    {{- end }}
                    return result;
                }
            }
        }
        
    }

}
{{ type_close }}

{{ namespace_close }}