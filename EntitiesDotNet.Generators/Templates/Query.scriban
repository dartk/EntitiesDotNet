using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Runtime.CompilerServices;
using EntitiesDotNet;


{{- for type in types }}

{{-
# Creates string "RR...RWW...W", readCount 'R' and (parameterCount - readCount) 'W'
func Suffix (parameterCount, readCount)
    $suffix = ""
    if readCount > 0
        for $i in 1..readCount
            $suffix += "R"
        end
    end
    
    $writeCount = parameterCount - readCount
    if $writeCount > 0
        for $i in 1..$writeCount
            $suffix += "W"
        end
    end
    
    ret $suffix
end


func array_map (arr, func)
    $result = []
    
    if (array.size arr) == 0
        ret $result
    end
    
    for $i in 0..((array.size arr) - 1)
        $result[$i] = func (arr[$i])
    end
    
    ret $result
end
}}


namespace {{ type.namespace }} {
    {{- array_type_name = type.name + "Array" }}
    {{- all_components = array.add_range type.read_components type.write_components }}
    {{-
    all_components_with_spans = type.read_components |
        array_map @(do
            ret {
                span: ("ReadOnlySpan<" + $0.type + ">"),
                name: $0.name
            }
        end) |
        array.concat (type.write_components |
            array_map @(do
                ret {
                    span: ("Span<" + $0.type + ">"),
                    name: $0.name
                }
            end))
    }}
    
    {{- # Creates string for IComponentArray.Select method "Component0.Read, Component1.Write, ..." }}
    
    {{-
    if (array.size type.read_components) > 0
        read_components_str = ".Read<" + (type.read_components | array_map @(do; ret $0.type; end) | array.join ", ") + ">()"
    else
        read_components_str = ""
    end
    
    if (array.size type.write_components) > 0
        write_components_str = ".Write<" + (type.write_components | array_map @(do; ret $0.type; end) | array.join ", ") + ">()"
    else
        write_components_str = ""
    end
    }}
    
    {{- select_str = read_components_str + write_components_str }}
    // {{ select_str }}
    
    {{ type.modifiers ~}} struct {{ type.name }} {
    
        [Pure]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static {{ type.name }}.Array Select(IComponentArray array) => new (array);
    
    
        [Pure]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static {{ type.name }}.ArrayList Select(IReadOnlyList<IComponentArray> arrayList) => new (arrayList);
    
    
        [Pure]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static {{ type.name }}.ArrayEnumerable Select(IEnumerable<IComponentArray> arrayEnumerable) => new (arrayEnumerable);
    
        
        public readonly ref struct Array {
    
            public Array(IComponentArray array) {
                (this.Length, {{ all_components | array_map @(do; ret ("this." + $0.name + "Span"); end) | array.join ", " }}) = array{{ select_str }};
            }
            
            
            public readonly int Length;
            
            {{- for component in all_components_with_spans }}
            public readonly {{ component.span }} {{ component.name }}Span;
            {{- end }}
            
            
            public {{ type.name }} this[int index] {
                get {
                    {{ type.name }} result = default;
                    {{- for component in all_components }}
                    result.{{ component.name }} = ref this.{{ component.name }}Span[index];
                    {{- end }}
                    return result;
                }
            }
            

            public Enumerator GetEnumerator() {
                return new Enumerator(this);
            }


            public ref struct Enumerator {
                public Enumerator(Array array) {
                    this._index = -1;
                    this._array = array;
                }


                private Array _array;
                private int _index;


                public bool MoveNext() {
                    return ++this._index < this._array.Length;
                }


                public {{ type.name }} Current => this._array[this._index];
            }
            
        }
        
        
        public readonly struct ArrayList {
        
            public ArrayList(IReadOnlyList<IComponentArray> arrayList) {
                this._arrayList = arrayList;
            }
            
            private readonly IReadOnlyList<IComponentArray> _arrayList;
            
            public Enumerator GetEnumerator() => new (this);
            
            
            public ref struct Enumerator {
            
                public Enumerator(ArrayList arrayList) {
                    this._arrayList = arrayList._arrayList;
                    this._arrayIndex = -1;
                    this._itemIndex = -1;
                }
            
                private readonly IReadOnlyList<IComponentArray> _arrayList;
                private {{ type.name }}.Array _currentArray;
                private int _arrayIndex;
                private int _itemIndex;
                
                public bool MoveNext() {
                    if (++this._itemIndex < this._currentArray.Length) {
                        return true;
                    }
                    
                    while (this._itemIndex >= this._currentArray.Length) {
                        ++this._arrayIndex;
                        
                        if (this._arrayIndex >= this._arrayList.Count) {
                            return false;
                        }
                        
                        this._currentArray = Select(_arrayList[this._arrayIndex]);
                        this._itemIndex = 0;
                    }
                    
                    return true;
                }
                
                public {{ type.name }} Current => this._currentArray[this._itemIndex];
                
            }
            
        }
        
        
        public readonly struct ArrayEnumerable {
            public ArrayEnumerable(IEnumerable<IComponentArray> arraySeq) {
                this._arraySeq = arraySeq;
            }
            
            private readonly IEnumerable<IComponentArray> _arraySeq;
            
            public Enumerator GetEnumerator() => new (this);
            
            
            public ref struct Enumerator {
            
                public Enumerator(ArrayEnumerable arrayEnumerable) {
                    this._enumerator = arrayEnumerable._arraySeq.GetEnumerator();
                    this._index = -1;
                }
            
                private readonly IEnumerator<IComponentArray> _enumerator;
                private {{ type.name }}.Array _currentArray;
                private int _index;
                
                public bool MoveNext() {
                    if (++this._index < this._currentArray.Length) {
                        return true;
                    }
                    
                    while (this._index >= this._currentArray.Length) {
                        if (!this._enumerator.MoveNext()) {
                            return false;
                        }
                        
                        this._currentArray = Select(this._enumerator.Current);
                        this._index = 0;
                    }
                    
                    return true;
                }
                
                public {{ type.name }} Current => this._currentArray[this._index];
                
            }
        }
    }
    
    
    public static partial class ParallelArrayCollectionSelectExtensions {
        
    }
}


{{ end }}
